/*
基数排序的基本思想：
	也是非比较的排序算法，对每一位进行排序，从最低位开始排序，复杂度为O(kn),为数组长度，
	k为数组中的数的最大的位数；基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；
	依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。
	最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，
	所以是稳定的。

	基数排序有两种方法：
		MSD 从高位开始进行排序
		LSD 从低位开始进行排序

基数排序的算法描述：
	取得数组中的最大数，并取得位数；
	arr为原始数组，从最低位开始取每个位组成radix数组；
	对radix进行计数排序（利用计数排序适用于小范围数的特点）；

	最佳情况：T(n) = O(n * k) 最差情况：T(n) = O(n * k) 平均情况：T(n) = O(n * k)。
*/
#include"RadixSort.h"

vector<int> RadixSort(vector<int>&input_vector)
{
	if (input_vector.size() < 2) return input_vector;
	int max = input_vector[0];
	for (auto x : input_vector)
	{
		if (x > max) max = x;
	}
	int maxDigit = 0;
	while (max != 0)
	{
		max /= 10;
		maxDigit++;
	}
	int mod = 10, div = 1;
	vector<vector<int>> bucketList;
	for (size_t i = 0; i < 10; i++)
	{
		vector<int>avector;
		bucketList.push_back(avector);
	}
	for (int i = 0; i < maxDigit; i++, mod *= 10, div *= 10)
	{
		for (int j = 0; j < input_vector.size(); j++)
		{
			int num = (input_vector[j] % mod) / div;
			bucketList[num].push_back(input_vector[j]);
		}
		int index = 0;
		for (int j = 0; j < bucketList.size(); j++)
		{
			for (int k = 0; k < bucketList[j].size(); k++)
				input_vector[index++] = bucketList[j][k];
			bucketList[j].clear();
		}
	}
	return input_vector;
}